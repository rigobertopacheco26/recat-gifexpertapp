{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCaregories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrig","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAa5C,OACI,sBAAMC,SARU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAIlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAXrB,SAACP,GAAQF,EAAcE,EAAEQ,OAAOF,a,+BCPhDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,6BAAKA,QCDF,SAASO,EAAT,GAA8B,IAAZnB,EAAW,EAAXA,SAAW,ECHhB,SAACA,GAAc,IAAD,EACZd,mBAAS,CAACqB,KAAK,GAAGa,SAAQ,IADd,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OAXAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GAAI,OACNC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,WAET,CAACpB,IACIqB,EDVgBM,CAAa3B,GAA7BO,EAFiC,EAEjCA,KAAKa,EAF4B,EAE5BA,QAYZ,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,GAAY,oBAAIJ,UAAU,kCAAd,qBAEf,qBAAKA,UAAU,YAAf,SACMT,EAAKE,KAAI,SAACC,GAAD,OACN,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,YEtB1C,IAiCeiB,EAjCO,SAAC,GAAS,eAAD,MAGS1C,mBAAS,CAAC,cAHnB,mBAGpB2C,EAHoB,KAGR5C,EAHQ,KAW3B,OACI,qCACA,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BAEQ4C,EAAWpB,KAAI,SAACT,EAAS8B,GAAV,OACX,cAACX,EAAD,CAAwBnB,SAAUA,GAApBA,YCZnB+B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.27fcc47e.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCaregories}) => {\n\n\n    const [inputValue, setInputValue] = useState('');\n    const handeInputChnage = (e) => { setInputValue(e.target.value)};\n\n    const handeSubmit = (e) => { \n        e.preventDefault(); \n        if(inputValue.trim().length > 2){\n            setCaregories( cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    };\n    return (\n        <form onSubmit={handeSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handeInputChnage} />\n\n        </form>\n    )\n\n\n}\n\n\n    \nAddCategory.propTypes = {\n    setCaregories:PropTypes.func.isRequired\n}","export const getGifs = async (category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=kp3beiPjkSRfhVOU4OCapU2IQHVXpNAz`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}></img>\n            <h3>{title}</h3>\n        </div>\n    )\n}\n","//import React,{useState,useEffect} from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport default function GifGrig({category}) {\n    \n    const {data,loading} = useFetchGifs(category);\n\n    /*\n    const [images, setImages] = useState([])\n    const [count, setCount] = useState(0)\n    useEffect( () =>{\n        getGifs(category)\n        .then(imgs => setImages(imgs))\n    },[category ])\n    */\n \n\n    return (\n        <>\n            <h2 className=\"animate__animated animate__fadeIn\">{category}</h2>\n            { loading &&  <h2 className=\"animate__animated animate_flash\">Loading</h2> }\n            {/*<h2>{ loading ? 'Cargando...' : 'Data Cargada'}</h2>*/}\n           <div className=\"card-grid\">\n                {data.map((img) =>(\n                    <GifGridItem key={img.id} {...img}/>\n                    //<li key={img.id}>{img.title}</li>\n                ))\n                \n                }\n            </div>\n        </>\n\n    )\n}\n","import {useState,useEffect} from 'react'\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({data:[],loading:true})\n\n    \n    useEffect( () =>{\n        getGifs(category)\n        .then(imgs => \n            setTimeout(() => {\n                setstate({\n                    data:imgs,\n                    loading:false\n                })\n            }, 1500)\n        );\n    },[category ])\n    return state;\n} ","import React,{useState}  from 'react';\nimport PropTypes from 'prop-types';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrig from './components/GifGrid';\n\nconst GifExpertApp  = ({ }) => {\n    //const caregories = ['One Punch','Samurai X','Dragon Ball'];\n\n    const [categories, setCaregories] = useState(['One Punch']);\n\n    /*\n    const handleAdd = () =>{\n        setCaregories( [...categories,'One Peace']);\n        //setCaregories( cats => [...categories,'One Peace']);\n    }\n    */\n    return (    \n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory  setCaregories={setCaregories}/>\n        <hr />\n        <ol>\n            {\n                categories.map((category,i) =>(\n                    <GifGrig key={category} category={category}/>\n                    //return <li key={category}>{category}</li>\n                ))\n            }\n        </ol>\n        </>\n    );\n    \n}\nGifExpertApp.propTypes = {\n   \n}\n\n\nexport default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}